요구사항

	MVC 디자인패턴
	
	* DTO : 이동 객체 [ 서로 다른 레이어간 이동할 때 사용하는 객체 ] 
	* DAO : 접근 객체 [ 실제 데이터에 접근할 때 사용되는 객체 ]

	Start ----->		view ----->		Controller ----->	BoardDTO ----->	BoardDAO
	
	예 ) 회원등록		1. 회원정보 입력   ---> 2. 유효성검사 후 객체화  ------------------>	3. 객체 저장
																					SQL 처리
					6. 리턴된 결과 출력 <---  5. SQL 결과 리턴	<-----------------	4. SQL 결과 
	
	
	// DB 모델링 // -----------------------------------------------------------------
	
	-- 1. DB 생성
		create database day15;
	-- 2. DB 선택
		use day15;
	-- 3. 테이블 생성
		create table member(
			mno int auto_increment primary key,	-- 회원번호 [ 자동생성, 식별자 ]
		    mid varchar(20),                    -- 회원 id [20자 이내]
		    mpw varchar(20)                     -- 회원 pw [20자 이내]
		);
	
	// DTO 모델링 // -----------------------------------------------------------------
	
	-- 1. 필드  : private/ DB 테이블의 필드와 동일하게 
	-- 2. 생성자 : 빈생성자  / 풀생성자 / 필요에 따라
	-- 3. 메소드 : get   /set    /toString
	
	// DAO 모델링 // -----------------------------------------------------------------

	-- *  싱클톤 : 프로그램내 DB 연동 1번만 해서 하나의 연동 객체 사용
	-- 1. 필드  
		private Connection conn;		// 1. 연결된 DB 구현 객체를 가지고 있는 인터페이스
		private PreparedStatement ps;	// 2. 연결된 SQl 조작 [+매개변수 기능] 인터페이스
		private ResultSet rs;			// 3. 실행된 SQL 결과 인터페이스 
	-- 2. 생성자 [ 연동코드 -> 객체 생성시 바로 연동 가능하게 하려고 ] 
		private MemberDAO() {
			try {
				conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/day15","root","1234");
			} 
			catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
	